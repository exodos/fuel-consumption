// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String                  @id @default(uuid())
  firstName              String
  lastName               String
  region                 String?
  city                   String?
  email                  String                  @unique
  mobileNumber           String                  @unique
  password               String
  adminRestPassword      Boolean                 @default(true)
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  memberships            Membership?
  thirdPartyLogs         ThirdPartyLog[]
  insuredPoliceReports   InsuredPoliceReport[]
  unInsuredPoliceReports UnInsuredPoliceReport[]
  hitAndRunPoliceReports HitAndRunPoliceReport[]
}

model Branch {
  id                     String                  @id @default(uuid())
  branchName             String                  @unique
  region                 String
  city                   String
  mobileNumber           String                  @unique
  memberships            Membership[]
  vehicles               Vehicle[]
  insuredPoliceReports   InsuredPoliceReport[]   @relation(name: "insuranceBranch")
  insureds               Insured[]
  hitAndRunPolicBranchs  HitAndRunPoliceReport[] @relation(name: "hitAndRunBranch")
  hitAndRunPoliceReports HitAndRunPoliceReport[] @relation(name: "ReporterPolice")
  claims                 Claim[]
  certificates           Certificate[]
  thirdPartyLogs         ThirdPartyLog[]
  claimHitAndRuns        ClaimHitAndRun[]
  claimUnInsureds        ClaimUnInsured[]
  organizations          Organization            @relation(fields: [orgId], references: [id])
  orgId                  String
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  policeBranchs          InsuredPoliceReport[]   @relation(name: "ReporterPolice")
  unInsuredPoliceReports UnInsuredPoliceReport[] @relation(name: "unInsuredBranch")
  policeReport           UnInsuredPoliceReport[] @relation(name: "unInsuredPoliceReporter")
  certificateRecords     CertificateRecord[]
  // insurances             Insurance[]
}

model Organization {
  id             String          @id @default(uuid())
  orgName        String          @unique
  region         String
  city           String
  mobileNumber   String          @unique
  branchs        Branch[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  thirdPartyLogs ThirdPartyLog[]
  description    OrgDesc

  // UnInsuredPoliceReport UnInsuredPoliceReport[]
}

model Membership {
  id             String          @id @default(uuid())
  role           MembershipRole  @default(USER)
  users          User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  thirdPartyLogs ThirdPartyLog[]
  branchs        Branch          @relation(fields: [branchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  branchId       String

  @@unique([userId, branchId])
}

model Certificate {
  id                 String              @id @default(uuid())
  certificateNumber  String              @unique
  status             InsuranceStatus     @default(SUSPENDED)
  issuedDate         DateTime            @default(now())
  policies           Policy              @relation(fields: [policyNumber], references: [policyNumber])
  policyNumber       String              @unique
  vehicles           Vehicle             @relation(fields: [vehiclePlateNumber], references: [plateNumber], onUpdate: Cascade, onDelete: Cascade)
  vehiclePlateNumber String              @unique
  branchs            Branch              @relation(fields: [branchId], references: [id])
  branchId           String
  premiumTarif       Float
  updatedAt          DateTime            @updatedAt
  claims             Claim[]
  thirdPartyLogs     ThirdPartyLog[]
  certificateRecords CertificateRecord[]
  payments           Payment?            @relation(fields: [refNumber], references: [refNumber])
  refNumber          String?
}

model CertificateRecord {
  id           String        @id @default(uuid())
  certificates Certificate[]
  policies     Policy[]
  vehicles     Vehicle[]
  branchs      Branch[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  // deletedTime        DateTime?
  // claims             Claim[]
}

model Insured {
  id             String          @id @default(uuid())
  regNumber      String          @unique
  firstName      String
  lastName       String
  occupation     String?
  region         String
  city           String
  subCity        String
  wereda         String
  kebelle        String
  houseNumber    String
  mobileNumber   String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  vehicles       Vehicle[]
  claims         Claim[]
  branchs        Branch          @relation(fields: [branchId], references: [id])
  branchId       String
  thirdPartyLogs ThirdPartyLog[]
  payments       Payment[]

  @@unique([mobileNumber, branchId])
}

model Vehicle {
  id                      String                @id @default(uuid())
  plateNumber             String                @unique
  engineNumber            String                @unique
  chassisNumber           String                @unique
  vehicleModel            String
  bodyType                String
  horsePower              String
  manufacturedYear        Int
  vehicleType             String
  vehicleSubType          String
  vehicleDetails          String
  vehicleUsage            String
  vehicleCategory         VehicleCategory
  premiumTarif            Float
  passengerNumber         Int
  carryingCapacityInGoods String?
  purchasedYear           Int
  dutyFreeValue           Float
  dutyPaidValue           Float
  vehicleStatus           VEHICLESTATUS         @default(NEW)
  isInsured               IsInsured             @default(NOTINSURED)
  insureds                Insured               @relation(fields: [insuredId], references: [id])
  insuredId               String
  branchs                 Branch                @relation(fields: [branchId], references: [id])
  branchId                String
  certificates            Certificate?
  responsibleVehicle      InsuredPoliceReport[] @relation("PoliceReport_responsibleVehicle")
  victimVehicle           InsuredPoliceReport[] @relation("PoliceReport_victimVehicle")
  claims                  Claim[]
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  accidentRecords         AccidentRecord[]
  certificateRecords      CertificateRecord[]
  // insurances              Insurance[]
  thirdPartyLogs          ThirdPartyLog[]
}

model Policy {
  id                     String              @id @default(uuid())
  policyNumber           String              @unique
  policyStartDate        DateTime            @db.Date
  policyExpireDate       DateTime            @db.Date
  policyIssuedConditions String?
  personsEntitledToUse   String?
  certificates           Certificate?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  certificateRecords     CertificateRecord[]
  // insurances             Insurance[]
}

enum MembershipRole {
  SUPERADMIN
  INSURER
  BRANCHADMIN
  MEMBER
  USER
  TRAFFICPOLICEADMIN
  TRAFFICPOLICEMEMBER
}

enum OrgDesc {
  MINISTRY
  INSURANCE
  TRAFFICPOLICE
}

enum CertificateStatus {
  CURRENT
  ARCHIEVED
}

model Claim {
  id                   String              @id @default(uuid())
  claimNumber          String              @unique
  damageEstimate       Float
  claimedAt            DateTime            @default(now())
  claimStatus          ClaimProgress       @default(OnProgress)
  insuredPoliceReports InsuredPoliceReport @relation(fields: [incidentNumber], references: [incidentNumber])
  incidentNumber       String              @unique
  insureds             Insured             @relation(fields: [claimantId], references: [id])
  claimantId           String
  vehicles             Vehicle             @relation(fields: [claimantPlateNumber], references: [plateNumber])
  claimantPlateNumber  String
  certificates         Certificate         @relation(fields: [certificateNumber], references: [certificateNumber])
  certificateNumber    String
  branchs              Branch              @relation(fields: [branchId], references: [id])
  branchId             String
  updatedAt            DateTime            @updatedAt
  accidentRecords      AccidentRecord[]
  thirdPartyLogs       ThirdPartyLog[]
}

enum ClaimProgress {
  OnProgress
  Completed
}

model ClaimUnInsured {
  id                     String                @id @default(uuid())
  claimNumber            String                @unique
  damageEstimate         Float
  claimedAt              DateTime              @default(now())
  unInsuredPoliceReports UnInsuredPoliceReport @relation(fields: [incidentNumber], references: [incidentNumber])
  incidentNumber         String                @unique
  vehiclePlateNumber     String
  branchs                Branch                @relation(fields: [branchId], references: [id])
  branchId               String
  updatedAt              DateTime              @updatedAt
  thirdPartyLogs         ThirdPartyLog[]
}

model ClaimHitAndRun {
  id                     String                @id @default(uuid())
  claimNumber            String                @unique
  damageEstimate         Float
  claimerFullName        String
  claimerRegion          String
  claimerCity            String
  claimerPhoneNumber     String
  claimedAt              DateTime              @default(now())
  branchs                Branch                @relation(fields: [branchId], references: [id])
  branchId               String
  hitAndRunPoliceReports HitAndRunPoliceReport @relation(fields: [incidentNumber], references: [incidentNumber])
  incidentNumber         String                @unique
  updatedAt              DateTime              @updatedAt
}

model InsuredPoliceReport {
  id                                      String          @id @default(uuid())
  incidentNumber                          String          @unique
  victimDriverName                        String
  victimLicenceNumber                     String
  victimLevel                             String
  victimRegion                            String
  victimCity                              String
  victimSubCity                           String
  victimWereda                            String
  victimKebelle                           String
  victimHouseNo                           String
  victimPhoneNumber                       String
  vehicle_PoliceReport_victimVehicle      Vehicle         @relation("PoliceReport_victimVehicle", fields: [victimVehicle], references: [plateNumber], onDelete: NoAction, onUpdate: Cascade)
  victimVehicle                           String
  branchs                                 Branch          @relation(name: "insuranceBranch", fields: [branchId], references: [id])
  branchId                                String
  policeBranch                            Branch          @relation(name: "ReporterPolice", fields: [policeBranchId], references: [id])
  policeBranchId                          String
  incidentCause                           String
  incidentDate                            DateTime        @db.Date
  incidentPlace                           String
  incidentTime                            String
  victims                                 Victim[]
  vehicle_PoliceReport_responsibleVehicle Vehicle         @relation("PoliceReport_responsibleVehicle", fields: [responsibleVehicle], references: [plateNumber], onDelete: NoAction, onUpdate: Cascade)
  responsibleVehicle                      String
  responsibleDriverName                   String
  responsiblePhoneNumber                  String
  reportDate                              DateTime        @default(now())
  claims                                  Claim?
  thirdPartyLogs                          ThirdPartyLog[]
  trafficPolices                          User            @relation(fields: [trafficPoliceId], references: [id])
  trafficPoliceId                         String
  // accidentRecords                         AccidentRecord? @relation(fields: [accidentRecordId], references: [id])
  // accidentRecordId                        String?
}

model UnInsuredPoliceReport {
  id                            String          @id @default(uuid())
  incidentNumber                String          @unique
  victimDriverName              String
  victimLicenceNumber           String
  victimLevel                   String
  victimRegion                  String
  victimCity                    String
  victimSubCity                 String
  victimWereda                  String
  victimKebelle                 String
  victimHouseNo                 String
  victimPhoneNumber             String
  victimVehiclePlateNumber      String
  branchs                       Branch          @relation(name: "unInsuredBranch", fields: [branchId], references: [id])
  branchId                      String
  policeBranch                  Branch          @relation(name: "unInsuredPoliceReporter", fields: [policeBranchId], references: [id])
  policeBranchId                String
  incidentCause                 String
  incidentDate                  DateTime        @db.Date
  incidentPlace                 String
  incidentTime                  String
  victims                       Victim[]
  responsibleVehiclePlateNumber String
  responsibleDriverName         String
  responsiblePhoneNumber        String
  reportDate                    DateTime        @default(now())
  claimUnInsureds               ClaimUnInsured?
  trafficPolices                User            @relation(fields: [trafficPoliceId], references: [id])
  trafficPoliceId               String
}

model HitAndRunPoliceReport {
  id              String          @id @default(uuid())
  incidentNumber  String          @unique
  victims         Victim[]
  incidentCause   String
  incidentDate    DateTime
  incidentPlace   String
  incidentTime    String?
  reportDate      DateTime        @default(now())
  claimHitAndRuns ClaimHitAndRun?
  branchs         Branch          @relation(name: "hitAndRunBranch", fields: [branchId], references: [id])
  branchId        String
  policeBranch    Branch          @relation(name: "ReporterPolice", fields: [policeBranchId], references: [id])
  policeBranchId  String
  trafficPolices  User            @relation(fields: [trafficPoliceId], references: [id])
  trafficPoliceId String
}

model Victim {
  id                      String                  @id @default(uuid())
  victimName              String
  victimCondition         VictimedCondition
  injuryType              InjuryType
  victimAddress           String?
  victimFamilyPhoneNumber String?
  victimHospitalized      String?
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  hitAndRunPoliceReports  HitAndRunPoliceReport[]
  insuredPoliceReports    InsuredPoliceReport[]
  unInsuredPoliceReport   UnInsuredPoliceReport?  @relation(fields: [unsuredPoliceReportId], references: [id])
  unsuredPoliceReportId   String?
}

model Tariff {
  id              Int             @id @default(autoincrement())
  vehicleType     String
  vehicleSubType  String
  vehicleDetail   String
  vehicleUsage    String
  vehicleCategory VehicleCategory @default(PRIVATEUSE)
  premiumTarif    Float
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  // certificates   Certificate[]
  thirdPartyLogs  ThirdPartyLog[]
}

model RegionList {
  id         Int      @id @default(autoincrement())
  regionName String?
  regionApp  String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CodeList {
  id        Int      @id @default(autoincrement())
  code      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TariffDetails {
  id             String   @id @default(uuid())
  vehicleType    String
  vehicleSubType String
  usage          String
  vehicleDetail  String
  premium        Float
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model ThirdPartyLog {
  id                   String                @id @default(uuid())
  userEmail            String
  orgName              String
  action               String
  mode                 String
  oldValue             Json?
  newValue             Json?
  certificates         Certificate[]
  claims               Claim[]
  insureds             Insured[]
  insuredPoliceReports InsuredPoliceReport[]
  memberships          Membership[]
  organizations        Organization[]
  users                User[]
  vehicles             Vehicle[]
  tariffs              Tariff[]
  timeStamp            DateTime              @default(now())
  ClaimUnInsured       ClaimUnInsured?       @relation(fields: [claimUnInsuredId], references: [id])
  claimUnInsuredId     String?
  branchs              Branch[]
}

// model AccidentRecord {
//   id                   String       @id @default(uuid())
//   accidentTypes        ACCIDENTTYPE
//   accidentSubType      String?
//   propertyInjuryAmount Float?
//   vehicles             Vehicle      @relation(fields: [plateNumber], references: [plateNumber], onUpdate: Cascade)
//   plateNumber          String
//   createdAt            DateTime     @default(now())
//   updatedAt            DateTime     @updatedAt
//   claims               Claim[]
// }

// enum ACCIDENTTYPE {
//   BODILYINJURY
//   PROPERTYINJURY
// }

model AccidentRecord {
  id             String           @id @default(uuid())
  bodilyInjury   ACCIDENTSUBTYPE?
  propertyInjury Float?
  vehicles       Vehicle          @relation(fields: [plateNumber], references: [plateNumber], onUpdate: Cascade)
  plateNumber    String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  claims         Claim            @relation(fields: [claimNumber], references: [claimNumber])
  claimNumber    String
  // claims         Claim[]
}

// model Insurance {
//   id        String          @id @default(uuid())
//   refNumber String          @unique
//   insureds     Insured         @relation(fields: [regNumber], references: [regNumber])
//   regNumber    String
//   vehicles     Vehicle         @relation(fields: [plateNumber], references: [plateNumber])
//   plateNumber  String
//   certificates Certificate     @relation(fields: [certNumber], references: [certificateNumber])
//   certNumber   String
//   policies     Policy          @relation(fields: [policyNumber], references: [policyNumber])
//   policyNumber String
//   branchs      Branch          @relation(fields: [branchId], references: [id])
//   branchId     String
//   status    InsuranceStatus @default(SUSPENDED)
//   createdAt DateTime        @default(now())
//   updatedAt DateTime        @updatedAt
// }

model Payment {
  id               String              @id @default(uuid())
  refNumber        String              @unique
  insureds         Insured             @relation(fields: [regNumber], references: [regNumber])
  regNumber        String
  certificates     Certificate[]
  paymentStatus    PaymentStatus       @default(NOTPAYED)
  commissionStatus CommissioningStatus @default(NotCommissioned)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
}

enum InsuranceStatus {
  APPROVED
  SUSPENDED
}

enum PaymentStatus {
  PAYED
  NOTPAYED
}

enum CommissioningStatus {
  Commissioned
  NotCommissioned
}

enum ACCIDENTSUBTYPE {
  SlightBodilyInjury
  SaviorBodilyInjury
  Death
}

enum VEHICLESTATUS {
  NEW
  RENEWAL
  ADDITIONAL
}

enum PaymentFor {
  THIRDPARTY
  CLAIM
}

enum IsInsured {
  INSURED
  NOTINSURED
}

enum STATUS {
  APPROVED
  SUSPENDED
  TRANSFERABLE
}

enum InjuryType {
  SIMPLE
  CRITICAL
  DEATH
}

enum VictimedCondition {
  PASSENGER
  PEDESTRIAN
  DRIVER
  ASSISTANT
}

enum VehicleCategory {
  PRIVATEUSE
  BUSINESSUSE
}
