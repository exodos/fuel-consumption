### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Consumption {
  amount: Float
  companyId: String
  createdAt: DateTime
  creditAccountNumber: String
  debitAccountNumber: String
  firstName: String
  fuelInLiters: Float
  fuelStationId: String
  fuelStationKebele: String
  fuelStationName: String
  fuelStationRegion: String
  fuelStationWoreda: String
  fuelStationZone: String
  fuelType: String
  id: Int
  lastKiloMeter: Int
  lastName: String
  middleName: String
  mobileNumber: String
  paidAt: DateTime
  plateCode: String
  plateNumber: String
  plateRegion: String
  reasonTypeCode: String
  reasonTypeName: String
  sourceId: String
  transactionNumber: String
  updatedAt: DateTime
}

input ConsumptionOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

type DailyConsumption {
  amount: Float
  companyId: String
  day: DateTime
  fuelInLiters: Float
  fuelStationId: String
  fuelStationRegion: String
  fuelType: String
  id: Int
  sourceId: String
  transactionCount: Int
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type FeedConsumption {
  consumptions: [Consumption!]!
  maxPage: Int
  totalConsumption: Int!
}

type FeedUser {
  maxPage: Int
  totalUser: Int!
  user: [User!]!
}

type MonthlyConsumption {
  amount: Float
  fuelInLiters: Float
  fuelStationId: String
  fuelType: String
  id: Int
  month: DateTime
  sourceId: String
}

type Mutation {
  adminChangeUserPassword(id: String!, password: String!): User!
  changeUserPassword(currentPassword: String!, id: String!, password: String!): User!
  createUser(input: userCreateInput!): User!
  deleteUser(id: String!): User!
  updateUser(input: userUpdateInput!, userId: String!): User!
}

type Query {
  consumptionById(id: Int!): Consumption
  consumptionByPlateNumber(plateCode: String!, plateNumber: String!, plateRegion: String!): Consumption
  feedConsumption(filter: String, orderBy: [ConsumptionOrderByInput!], skip: Int, take: Int): FeedConsumption!
  feedUser(filter: String, orderBy: [UserOrderByInput!], skip: Int, take: Int): FeedUser!
  userByEmail(email: String!): User!
  usersByID(userId: String!): User!
}

enum Role {
  ADMIN
  SUPERADMIN
  USER
}

enum Sort {
  asc
  desc
}

type User {
  adminResetPassword: Boolean
  createdAt: DateTime
  email: String
  firstName: String
  id: String
  lastName: String
  middleName: String
  mobileNumber: String
  password: String
  role: Role
  updatedAt: DateTime
}

input UserOrderByInput {
  createdAt: Sort
  updatedAt: Sort
}

type WeeklyConsumption {
  amount: Float
  fuelInLiters: Float
  fuelStationId: String
  fuelType: String
  id: Int
  sourceId: String
  week: DateTime
}

input userCreateInput {
  email: String
  firstName: String
  lastName: String
  middleName: String
  mobileNumber: String
  password: String
  role: Role
}

input userUpdateInput {
  email: String
  firstName: String
  lastName: String
  middleName: String
  mobileNumber: String
  role: Role
}